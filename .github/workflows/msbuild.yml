name: MSBuild

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest
    

    steps:
          - name: Download DXSDK if needed
            run:   |
                 curl -L https://download.microsoft.com/download/a/e/7/ae743f1f-632b-4809-87a9-aa1bb3458e31/DXSDK_Jun10.exe -o _DX2010_.exe
                 7z x _DX2010_.exe DXSDK/Include/*.*
                 7z x _DX2010_.exe DXSDK/Lib/x64/*.*
                 7z x _DX2010_.exe DXSDK/Lib/x86/*.*
                 rm -fR _DX*_ _DX*_.exe
            shell: bash
          - uses: actions/checkout@v2

          - name: Add MSBuild to PATH
            uses: microsoft/setup-msbuild@v1.0.2

          - name: Restore NuGet packages
            working-directory: ${{env.GITHUB_WORKSPACE}}
            run: nuget restore ${{env.SOLUTION_FILE_PATH}}
            
            env:
              DXSDK_DIR: "C:\\Program Files (x86)\\Microsoft DirectX SDK (June 2010)\\"
      
          - name: Build
            working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
            run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}} ${{env.DXSDK_DIR}}
